// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using NiblJson;
//
//    var niblLatestPacks = NiblLatestPacks.FromJson(jsonString);
using System;
using System.Collections.Generic;

using System.Globalization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace NiblJsonPackList
{


    public partial class NiblPackList
    {
        [JsonProperty("status", NullValueHandling = NullValueHandling.Ignore)]
        public string Status { get; set; }

        [JsonProperty("message", NullValueHandling = NullValueHandling.Ignore)]
        public string Message { get; set; }

        [JsonProperty("content", NullValueHandling = NullValueHandling.Ignore)]
        public List<NiblPack> PackList { get; set; }

        [JsonProperty("max", NullValueHandling = NullValueHandling.Ignore)]
        public long? Max { get; set; }

        [JsonProperty("offset", NullValueHandling = NullValueHandling.Ignore)]
        public long? Offset { get; set; }

        [JsonProperty("total", NullValueHandling = NullValueHandling.Ignore)]
        public long? Total { get; set; }

        [JsonProperty("previous", NullValueHandling = NullValueHandling.Ignore)]
        public string Previous { get; set; }

        [JsonProperty("current", NullValueHandling = NullValueHandling.Ignore)]
        public string Current { get; set; }

        [JsonProperty("next", NullValueHandling = NullValueHandling.Ignore)]
        public string Next { get; set; }
    }

    public partial class NiblPack
    {
        [JsonProperty("botId", NullValueHandling = NullValueHandling.Ignore)]
        public long? BotId { get; set; }

        [JsonProperty("number", NullValueHandling = NullValueHandling.Ignore)]
        public long? Number { get; set; }

        [JsonProperty("name", NullValueHandling = NullValueHandling.Ignore)]
        public string Name { get; set; }

        [JsonProperty("size", NullValueHandling = NullValueHandling.Ignore)]
        public string Size { get; set; }

        [JsonProperty("sizekbits", NullValueHandling = NullValueHandling.Ignore)]
        public long? Sizekbits { get; set; }

        [JsonProperty("episodeNumber", NullValueHandling = NullValueHandling.Ignore)]
        public long? EpisodeNumber { get; set; }

        [JsonProperty("lastModified", NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? LastModified { get; set; }
    }

    public partial class NiblPackList
    {
        public static NiblPackList FromJson(string json) => JsonConvert.DeserializeObject<NiblPackList>(json, NiblJson.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this NiblPackList self) => JsonConvert.SerializeObject(self, NiblJson.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}
